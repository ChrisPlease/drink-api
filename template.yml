Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Description: Deployment Environment name
    AllowedValues:
      - dev
      - test
      - prod
      - local
    Default: dev
  AccountId:
    Type: String
    Description: AWS Account ID

Resources:
  WaterlogApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      DefinitionBody:
        swagger: '2.0'
        info:
          title: "Waterlog GraphQL API"
          version: "1.0"
        paths:
          /callback:
            get:
              produces:
                - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthCallbackApp.Outputs.AuthCallbackFunctionArn}/invocations
                httpMethod: POST
                type: aws_proxy
              security: []
          /graphql:
            post:
              consumes:
                - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterlogGraphqlApp.Outputs.WaterlogFunctionArn}/invocations

                httpMethod: POST
                type: aws_proxy
              security:
                - CustomJwksRsaAuthorizer: []
            options:
              responses:
                '204':
                  description: "204 response"
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    statusCode: '204'
                requestTemplates:
                  application/json: "{ \"statusCode\": 204 }"
                type: mock
                security: []
      Auth:
        Authorizers:
          CustomJwksRsaAuthorizer:
            FunctionArn:
              Fn::GetAtt: [JwksRsaAuthorizerApp, Outputs.JwksRsaCustomAuthorizerArn]
            Identity:
              Header: Authorization
              ReauthorizeEvery: 300 # value in seconds

  # functions/authorizer
  JwksRsaAuthorizerApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./functions/authorizer/template.yml
      Parameters:
        AccountId: !Ref AccountId
        Environment: !Ref Environment

  ## functions/grahql
  WaterlogGraphqlApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./functions/graphql/template.yml
      Parameters:
        AccountId: !Ref AccountId
        Environment: !Ref Environment

  ## functions/auth-callback
  AuthCallbackApp:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./functions/auth-callback/template.yml
      Parameters:
        AccountId: !Ref AccountId
        Environment: !Ref Environment

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WaterlogGraphqlApp.Outputs.WaterlogFunctionArn
      Principal: apigateway.amazonaws.com

  CallbackLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt AuthCallbackApp.Outputs.AuthCallbackFunctionArn
        Principal: apigateway.amazonaws.com
