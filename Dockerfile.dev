# Base Image
FROM node:18-bullseye AS base

ARG ENV=develop
ARG ENV_FILE=".env"

# Optionally override the .env file based on the ENV if ENV_FILE is not provided explicitly
ENV ENV_FILE=${ENV_FILE:-.env.${ENV}}
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV LAMBDA_TASK_ROOT="/var/task"

RUN corepack enable

# Builder image
FROM base AS builder

RUN apt-get update && \
  apt-get install -y \
  g++ \
  make \
  cmake \
  unzip \
  libcurl4-openssl-dev \
  lsof

COPY . /usr/src/app
COPY ./aws-lambda-rie /usr/local/bin/aws-lambda-rie
WORKDIR /usr/src/app
COPY ./${ENV_FILE} ./.env

RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile

RUN pnpm run -r --if-present build:dev
RUN pnpm run -r --if-present alias
RUN pnpm i -r aws-lambda-ric

### Service Setup
FROM builder AS service-setup

WORKDIR /usr/app

COPY --from=builder /usr/src/app /usr/app
COPY --from=builder /usr/local/bin/aws-lambda-rie /usr/local/bin/aws-lambda-rie
COPY ./scripts/entrypoint.dev.sh ./dev.sh

RUN pnpm deploy --filter=@waterlog/graphql-lambda /prod/graphql

## GraphQL
FROM service-setup AS graphql

WORKDIR ${LAMBDA_TASK_ROOT}
COPY --from=builder /usr/src/app/.env ${LAMBDA_TASK_ROOT}/.env
COPY --from=service-setup /usr/app/dev.sh ${LAMBDA_TASK_ROOT}
COPY --from=service-setup /prod/graphql ${LAMBDA_TASK_ROOT}

RUN chmod +x ./dev.sh

CMD ["pnpm", "dev"]
