# Base Image
FROM node:20-bullseye AS base

ARG ENV=develop
ARG ENV_FILE=".env"

# Optionally override the .env file based on the ENV if ENV_FILE is not provided explicitly
ENV ENV_FILE=${ENV_FILE:-.env.${ENV}}
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
ENV LAMBDA_TASK_ROOT="/var/task"

RUN corepack enable

# Builder image
FROM base AS builder

RUN apt-get update && \
apt-get install -y \
g++ \
make \
cmake \
unzip \
libcurl4-openssl-dev \
lsof

COPY . /usr/src/app
COPY ./aws-lambda-rie /usr/local/bin/aws-lambda-rie
WORKDIR /usr/src/app
COPY ./${ENV_FILE} ./.env

RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile

RUN pnpm run -r --if-present build:dev
RUN pnpm run -r --if-present alias
RUN pnpm i -r aws-lambda-ric

### Service Setup
FROM builder AS service-setup

WORKDIR ${LAMBDA_TASK_ROOT}

COPY --from=builder /usr/src/app ${LAMBDA_TASK_ROOT}
COPY --from=builder /usr/local/bin/aws-lambda-rie /usr/local/bin/aws-lambda-rie
COPY ./scripts/entrypoint.docker.sh ./entrypoint.sh
COPY ./scripts/entrypoint.dev.sh ./dev.sh

RUN chmod +x ./entrypoint.sh

## Auth Callback
FROM service-setup AS auth-callback
RUN pnpm --filter @waterlog/auth-callback install
ENTRYPOINT ["./entrypoint.sh", "functions/auth-callback", "pnpm run dev"]

## GraphQL
FROM service-setup AS graphql
RUN pnpm --filter @waterlog/graphql-lambda install
ENTRYPOINT ["./entrypoint.sh", "functions/graphql", "pnpm run dev"]

# Authorizer
FROM service-setup AS authorizer
RUN pnpm --filter @waterlog/authorizer install
ENTRYPOINT ["./entrypoint.sh", "functions/authorizer", "pnpm run dev"]
