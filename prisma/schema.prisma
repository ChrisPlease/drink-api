generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "filteredRelationCount"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuidOssp(map: "uuid-ossp")]
}

model Drink {
  id          String       @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String       @db.VarChar
  icon        String       @db.VarChar
  coefficient Float?       @default(0)
  caffeine    Float?       @default(0)
  sugar       Float?       @default(0)

  userId      String?      @map("user_id") @db.VarChar
  user        User?        @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  ingredients DrinkIngredients[]

  entries     Entry[]

  createdAt   DateTime     @map("created_at") @unique() @default(now()) @db.Timestamp(6)

  @@index(name)
  @@index(createdAt)
  @@index([id,userId])
  @@unique([id,name])
  @@unique([id,userId])
  @@unique([name,userId])
  @@map("drinks")
}

model Ingredient {
  id      String    @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  parts   Int

  drink   DrinkIngredients[]
  drinkId String    @map("drink_id") @db.Uuid

  @@map("ingredients")
}

model DrinkIngredients {
  drinkId       String      @map("drink_id") @db.Uuid
  drink         Drink       @relation(fields: [drinkId], references: [id])

  ingredientId  String      @map("ingredient_id") @db.Uuid
  ingredient    Ingredient  @relation(fields: [ingredientId], references: [id])

  @@id([drinkId, ingredientId])
  @@map("drink_ingredients")
}

model Entry {
  id        String    @id() @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  volume    Float
  timestamp DateTime  @unique() @default(now()) @db.Timestamp(6)

  drinkId   String    @map("drink_id") @db.Uuid
  drink     Drink     @relation(fields: [drinkId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  userId    String    @map("user_id") @db.VarChar
  user      User      @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([volume,id])
  @@unique([drinkId,id])
  @@unique([timestamp, userId])
  @@map("entries")
}

model User {
  id      String  @id() @db.VarChar
  drinks  Drink[]
  entries Entry[]

  @@map("users")
}
