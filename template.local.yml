Transform: AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Description: Deployment Environment name
    AllowedValues:
      - dev
      - test
      - prod
      - local
    Default: dev
  AccountId:
    Type: String
    Description: AWS Account ID

Resources:
  WaterlogApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      DefinitionBody:
        swagger: '2.0'
        info:
          title: "Waterlog GraphQL API"
          version: "1.0"
        paths:
          /callback:
            get:
              produces:
                - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthCallbackFunction.Arn}/invocations

                httpMethod: POST
                type: aws_proxy
              security: []
          /graphql:
            post:
              consumes:
                - application/json
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WaterlogFunction.Arn}/invocations

                httpMethod: POST
                type: aws_proxy
              security:
                - CustomJwksRsaAuthorizer: []
            options:
              responses:
                '204':
                  description: "204 response"
                  headers:
                    Access-Control-Allow-Headers:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Origin:
                      type: "string"
                    Content-Type:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                    statusCode: '204'
                requestTemplates:
                  application/json: "{ \"statusCode\": 204 }"
                type: mock
                security: []
        securityDefinitions:
          CustomJwksRsaAuthorizer:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              type: "token"
              authorizerUri:
                Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${JwksRsaCustomAuthorizer.Arn}/invocations
              identitySource: "method.request.header.Authorization"
              authorizerResultTtlInSeconds: 300
      Auth:
        Authorizers:
          CustomJwksRsaAuthorizer:
            FunctionArn:
              Fn::GetAtt: [JwksRsaCustomAuthorizer, Arn]
            Identity:
              Header: Authorization
            ReauthorizeEvery: 300 # value in seconds
            Type: TOKEN

  # functions/authorizer
  JwksRsaCustomAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !If
        - IsLocalEnvironment
        - authorizer-fn:latest
        - !Sub "${AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/authorizer-fn:dev-v1"
      ImageConfig:
        Command: ["dist/index.handler"]
    Metadata:
      Dockerfile: Dockerfile
      DockerTarget: authorizer
      DockerContext: .


  ## functions/grahql
  WaterlogFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !If
        - IsLocalEnvironment
        - graphql-fn:latest
        - !Sub "${AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/graphql-fn:dev-v1"
      ImageConfig:
        Command: ["dist/index.handler"]
      Timeout: 30
    Metadata:
      Dockerfile: Dockerfile
      DockerTarget: graphql
      DockerContext: .

  ## functions/auth-callback
  AuthCallbackFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !If
        - IsLocalEnvironment
        - callback-fn:latest
        - !Sub "${AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/callback-fn:dev-v3"
      ImageConfig:
        Command: ["dist/index.handler"]
    Metadata:
      Dockerfile: Dockerfile
      DockerTarget: auth-callback
      DockerContext: .


  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt WaterlogFunction.Arn
      Principal: apigateway.amazonaws.com

  CallbackLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt AuthCallbackFunction.Arn
        Principal: apigateway.amazonaws.com

Conditions:
  IsLocalEnvironment: !Equals [!Ref Environment, local]
