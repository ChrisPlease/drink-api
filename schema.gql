"""
Date scalar used for JS Date
"""
scalar Date

"""
Icon scalar mapped to FontAwesome `IconName` type
"""
scalar Icon


"""
Drink Interface for all drinks
"""
interface Drink {
  id: ID!
  name: String!
  icon: Icon!
  coefficient: Float
  caffeine: Float
  sugar: Float
  entries: [Entry!]
  user: User
}

"""
Base Drink used for all drinks
"""
type BaseDrink implements Drink {
  id: ID!
  name: String!
  icon: Icon!
  coefficient: Float
  caffeine: Float
  sugar: Float
  entries: [Entry!]
  user: User
}

"""
Mixed Drink when drink has ingredients
"""
type MixedDrink implements Drink {
  id: ID!
  name: String!
  icon: Icon!
  coefficient: Float
  caffeine: Float
  sugar: Float
  entries: [Entry!]
  user: User
  ingredients: [Ingredient!]!
}

"""
Union of Mixed and Base Drinks
"""
union DrinkResult = BaseDrink | MixedDrink

"""
Base Ingredient used in Drink type
"""
type Ingredient {
  id: ID!
  parts: Int!
  drink: DrinkResult
}

"""
Base Entry for logged drinks
"""
type Entry {
  id: ID!
  volume: Float!
  caffeine: Float!
  sugar: Float!
  waterContent: Float!
  user: User
  drink: DrinkResult
  timestamp: Date!
}

"""
Drink History to retreive summary of drink entries
"""
# eslint-disable-next-line
type DrinkHistory {
  count: Int!
  totalVolume: Float!
  waterVolume: Float!
  lastEntry: Date
  drink: DrinkResult!
}

"""
Base user type
"""
type User {
  id: ID!
}

"""
Input for Ingredient type
"""
input IngredientInput {
  drinkId: ID!
  parts: Int!
}

"""
Input for Drink type
"""
input DrinkInput {
  name: String!
  icon: Icon!

  servingSize: String
  caffeine: String
  sugar: String
  coefficient: String

  ingredients: [IngredientInput!]
}

"""
Pagination List metadata
"""
type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

"""
Interface for paginated queries
"""
interface PaginatedQuery {
  pageInfo: PageInfo
}

"""
Edge for Paginated Drinks
"""
type DrinkEdge {
  node: DrinkResult!
  cursor: String
}

"""
Paginated list of drinks
"""
type DrinksPaginated implements PaginatedQuery {
  edges: [DrinkEdge!]!
  pageInfo: PageInfo
}

"""
Edge for Paginated Entries
"""
type EntryEdge {
  node: Entry!
  cursor: String
}

"""
Paginated list of entries
"""
type EntriesPaginated implements PaginatedQuery {
  edges: [EntryEdge!]!
  pageInfo: PageInfo
}

"""
Root Queries
"""
type Query {
  """ Get a drink by id """
  drink(drinkId: ID!): DrinkResult
  drinks(
    search: String,
    cursor: String,
    limit: Int,
    userId: ID
  ): DrinksPaginated
  entries(
    distinct: Boolean,
    cursor: String,
    limit: Int,
    drinkId: ID
  ): EntriesPaginated
  users: [User!]
  me: User
  user(userId: ID!): User
  drinkHistory(drinkId: ID!): DrinkHistory
  drinksHistory: [DrinkHistory]
}

"""
Root Mutations
"""
type Mutation {
  entryCreate(volume: Float!, drinkId: ID!): Entry
  drinkCreate(drinkInput: DrinkInput!): DrinkResult
  drinkDelete(drinkId: ID!): DrinkResult
}
