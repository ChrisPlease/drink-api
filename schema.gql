scalar Date
scalar Icon

type Drink {
  id: ID!
  name: String!
  icon: Icon!
  coefficient: Float
  caffeine: Float
  sugar: Float
  entries: [Entry]
  ingredients: [Ingredient]
  user: User
}

type Ingredient {
  id: ID!
  parts: Int!
  drink: Drink
}

type Entry {
  id: ID!
  volume: Float!
  caffeine: Float!
  sugar: Float!
  waterContent: Float!
  user: User
  drink: Drink
  timestamp: Date!
}

type DrinkHistory {
  count: Int!
  totalVolume: Float!
  waterVolume: Float!
  lastEntry: Date
  drink: Drink!
}

type User {
  id: ID!
}

input IngredientInput {
  drinkId: ID!
  parts: Int!
}

input DrinkInput {
  name: String!
  icon: Icon!

  servingSize: String
  caffeine: String
  sugar: String
  coefficient: String

  ingredients: [IngredientInput!]
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
}

interface PaginatedQuery {
  pageInfo: PageInfo
}

type DrinkEdge {
  node: Drink!
  cursor: String
}

type PaginatedDrinks implements PaginatedQuery {
  edges: [DrinkEdge!]!
  pageInfo: PageInfo
}

type EntryEdge {
  node: Entry!
  cursor: String
}

type PaginatedEntries implements PaginatedQuery {
  edges: [EntryEdge!]!
  pageInfo: PageInfo
}

type Query {
  drink(drinkId: ID!): Drink
  drinks(search: String, cursor: String, limit: Int, userId: ID): PaginatedDrinks
  entries(distinct: Boolean, cursor: String, limit: Int, drinkId: ID): PaginatedEntries
  users: [User!]
  currentUser: User
  user(userId: ID!): User
  drinkHistory(drinkId: ID!): DrinkHistory
  drinksHistory: [DrinkHistory]
}

type Mutation {
  entryCreate(volume: Float!, drinkId: ID!): Entry
  drinkCreate(drinkInput: DrinkInput!): Drink
  drinkDelete(drinkId: ID!): Drink
}
