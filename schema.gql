
"""
Date scalar used for JS Date
"""
scalar Date

"""
Icon scalar mapped to FontAwesome `IconName` type
"""
scalar Icon


"""
Sort Enum
"""
enum Sort {
  ASC
  DESC
}

"""
Comparison Enum
"""
enum Comparison {
  GT
  GTE
  LT
  LTE
}

"""
Number filter to allow gte, or lte comparison
"""
input NumberFilter {
  value: Float
  comparison: Comparison
}

"""
Node interface for Paginated Queries
"""
interface Node {
  id: ID!
}

"""
Sorting input for Drinks
"""
input DrinkSort {
  name: Sort
  createdAt: Sort
  entries: Sort
  coefficient: Sort
  sugar: Sort
}

"""
Drink Interface for all drinks
"""
interface Drink implements Node {
  id: ID!
  name: String!
  icon: Icon!
  coefficient: Float
  caffeine: Float
  sugar: Float
  servingSize: Float
  entries(
    sort: EntriesSort,
    filter: EntriesFilter,
    before: String,
    after: String,
    first: Int,
    last: Int
  ): EntriesPaginated
  user: User
  createdAt: Date!
}

"""
Base Drink used for all drinks
"""
type BaseDrink implements Drink & Node {
  id: ID!
  name: String!
  icon: Icon!
  coefficient: Float
  caffeine: Float
  sugar: Float
  servingSize: Float
  entries(
    sort: EntriesSort,
    filter: EntriesFilter,
    before: String,
    after: String,
    first: Int,
    last: Int
  ): EntriesPaginated
  user: User
  createdAt: Date!
}

"""
Mixed Drink when drink has ingredients
"""
type MixedDrink implements Drink & Node {
  id: ID!
  name: String!
  icon: Icon!
  coefficient: Float
  caffeine: Float
  sugar: Float
  servingSize: Float
  entries(
    sort: EntriesSort,
    filter: EntriesFilter,
    before: String,
    after: String,
    first: Int,
    last: Int
  ): EntriesPaginated
  user: User
  ingredients: [Ingredient!]!
  createdAt: Date!
}

"""
Union of Mixed and Base Drinks
"""
union DrinkResult = BaseDrink | MixedDrink

"""
Base Ingredient used in Drink type
"""
type Ingredient {
  id: ID!
  parts: Int!
  drink: DrinkResult
}


"""
Sorting input for Entries
"""
input EntriesSort {
  timestamp: Sort
  drink: Sort
  volume: Sort
}

"""
Base Entry for logged drinks
"""
type Entry implements Node {
  id: ID!
  volume: Float!
  caffeine: Float!
  sugar: Float!
  waterContent: Float!
  servings: Float!
  user: User
  drink: DrinkResult!
  timestamp: Date!
}

"""
Drink History to retreive summary of drink entries
"""
type DrinkHistory implements Node {
  id: ID!
  count: Int!
  totalVolume: Float!
  waterVolume: Float!
  entries(
    sort: EntriesSort,
    filter: EntriesFilter,
    before: String,
    after: String,
    first: Int,
    last: Int,
    drinkId: ID
  ): EntriesPaginated
  drink: DrinkResult!
}

"""
Base user type
"""
type User implements Node {
  id: ID!
  entries(
    sort: EntriesSort,
    filter: EntriesFilter,
    before: String,
    after: String,
    first: Int,
    last: Int,
    drinkId: ID,
  ): EntriesPaginated
  drinks(
    sort: DrinkSort,
    filter: DrinksFilter,
    before: String,
    after: String,
    first: Int,
    last: Int,
  ): DrinksPaginated
  drinksHistory(
    before: String,
    after: String,
    first: Int,
    last: Int,
    filter: DrinksHistoryFilter,
  ): DrinksHistoryPaginated
}

"""
Input for Ingredient type
"""
input IngredientInput {
  drinkId: ID!
  parts: Int!
}

"""
Input for Creating a new Drink
"""
input DrinkCreateInput {
  name: String!
  icon: Icon!

  servingSize: Float!
  caffeine: Float
  sugar: Float
  coefficient: Float

  ingredients: [IngredientInput!]
}

"""
Input for Editing a Drink
"""
input DrinkEditInput {
  id: ID!

  name: String
  icon: Icon

  servingSize: Float
  caffeine: Float
  sugar: Float
  coefficient: Float

  ingredients: [IngredientInput!]
}

"""
Pagination List metadata
"""
type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

"""
Interface for paginated queries
"""
interface PaginatedQuery {
  pageInfo: PageInfo
}

"""
Edge for Paginated Drinks
"""
type DrinkEdge {
  node: DrinkResult!
  cursor: String
}

"""
Paginated list of drinks
"""
type DrinksPaginated implements PaginatedQuery {
  edges: [DrinkEdge!]!
  pageInfo: PageInfo
}

"""
Edge for Paginated Entries
"""
type EntryEdge {
  node: Entry!
  cursor: String
}

"""
Paginated list of entries
"""
type EntriesPaginated implements PaginatedQuery {
  edges: [EntryEdge!]!
  pageInfo: PageInfo
}

"""
Edge for Paginated Drink History
"""
type DrinkHistoryEdge {
  node: DrinkHistory!
  cursor: String!
}

"""
Paginated Drinks History list
"""
type DrinksHistoryPaginated implements PaginatedQuery {
  edges: [DrinkHistoryEdge!]!
  pageInfo: PageInfo
}

"""
Filter for the Drinks query
"""
input DrinksFilter {
  search: String
  coefficient: NumberFilter
  isMixedDrink: Boolean
}

"""
Filter for the Drinks History query
"""
input DrinksHistoryFilter {
  search: String
  hasEntries: Boolean
  limit: Date
}

"""
Filter for the Entries query
"""
input EntriesFilter {
  search: String
  limit: Date
  distinct: Boolean
}

"""
Root Queries
"""
type Query {
  node(id: ID!): Node
  """ Get a drink by id """
  drink(drinkId: ID!): DrinkResult
  drinks(
    sort: DrinkSort,
    filter: DrinksFilter,
    search: String,
    before: String,
    after: String,
    first: Int,
    last: Int,
    userId: ID
  ): DrinksPaginated
  entry(entryId: ID!): Entry
  entries(
    sort: EntriesSort,
    filter: EntriesFilter,
    before: String,
    after: String,
    first: Int,
    last: Int,
    drinkId: ID
  ): EntriesPaginated
  users: [User!]
  me: User
  user(userId: ID!): User
  drinkHistory(drinkId: ID!): DrinkHistory
  drinksHistory(
    before: String,
    after: String,
    first: Int,
    last: Int,
    filter: DrinksHistoryFilter,
  ): DrinksHistoryPaginated
}

"""
Root Mutations
"""
type Mutation {
  entryCreate(volume: Float!, drinkId: ID!): Entry
  entryDelete(entryId: ID!): Entry
  drinkCreate(drinkInput: DrinkCreateInput!): DrinkResult
  drinkDelete(drinkId: ID!): DrinkResult
  drinkEdit(drinkInput: DrinkEditInput!): DrinkResult
  userCreate(userId: ID!): User
}
