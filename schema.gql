"""
Date scalar used for JS Date
"""
scalar Date

"""
Icon scalar mapped to FontAwesome `IconName` type
"""
scalar Icon


"""
Sort Enum
"""
enum Sort {
  ASC
  DESC
}

"""
Comparison Enum
"""
enum Comparison {
  GT
  GTE
  LT
  LTE
}

"""
Number filter to allow gte, or lte comparison
"""
input NumberFilter {
  value: Float!
  comparison: Comparison!
}

"""
ID Filter
"""
input IDFilter {
  in: [ID!]
}

"""
Node interface for Paginated Queries
"""
interface Node {
  id: ID!
}

"""
Sorting input for Drink Nutrition
"""
input DrinkNutritionSort {
  coefficient: Sort
  protein: Sort
}

"""
Sorting input for Drinks
"""
input DrinkSort {
  name: Sort
  createdAt: Sort
  entries: Sort

  nutrition: DrinkNutritionSort
}

"""
Nutriton Input for creating and editing drinks
"""
input DrinkNutritionInput {
  coefficient: Float

  servingSize: Float!
  servingUnit: String!

  metricSize: Int!

  calories: Float
  saturatedFat: Float
  totalFat: Float
  cholesterol: Float
  sodium: Float
  carbohydrates: Float
  fiber: Float
  sugar: Float
  addedSugar: Float
  protein: Float
  potassium: Float

  caffeine: Float
}

"""
Nutrition interface for both drinks and entries
"""

interface Nutrition {
  calories: Float
  saturatedFat: Float
  totalFat: Float
  cholesterol: Float
  sodium: Float
  carbohydrates: Float
  fiber: Float
  sugar: Float
  addedSugar: Float
  protein: Float
  potassium: Float

  caffeine: Float
}

"""
Drink Health Nutrition field
"""
# eslint-disable-next-line @graphql-eslint/strict-id-in-types
type DrinkNutrition implements Nutrition {
  coefficient: Float

  servingSize: Float
  servingUnit: String
  metricSize: Int
  imperialSize: Int

  calories: Float
  saturatedFat: Float
  totalFat: Float
  cholesterol: Float
  sodium: Float
  carbohydrates: Float
  fiber: Float
  sugar: Float
  addedSugar: Float
  protein: Float
  potassium: Float

  caffeine: Float
}

"""
Entry nutrition field.

Contains water content and servings
"""
# eslint-disable-next-line @graphql-eslint/strict-id-in-types
type EntryNutrition implements Nutrition {
  servings: Float

  water: Float

  calories: Float
  saturatedFat: Float
  totalFat: Float
  cholesterol: Float
  sodium: Float
  carbohydrates: Float
  fiber: Float
  sugar: Float
  addedSugar: Float
  protein: Float
  potassium: Float

  caffeine: Float
}

"""
Drink Interface for all drinks
"""
interface Drink {
  id: ID!
  icon: Icon
  name: String!
  nutrition: DrinkNutrition!
  entries(
    sort: EntrySort,
    filter: EntryFilter,
    before: String,
    after: String,
    first: Int,
    last: Int
  ): EntriesPaginated
  user: User
}

"""
Result form scanning a drink upc
"""
# eslint-disable-next-line @graphql-eslint/strict-id-in-types
type ScanDrink implements Drink {
  id: ID!
  upc: String
  icon: Icon
  name: String!
  nutrition: DrinkNutrition!
  entries(
    sort: EntrySort,
    filter: EntryFilter,
    before: String,
    after: String,
    first: Int,
    last: Int
  ): EntriesPaginated
  user: User
}

"""
Base Drink used for all drinks
"""
type BaseDrink implements Drink & Node {
  id: ID!
  upc: String
  name: String!
  icon: Icon
  nutrition: DrinkNutrition!
  entries(
    sort: EntrySort,
    filter: EntryFilter,
    before: String,
    after: String,
    first: Int,
    last: Int
  ): EntriesPaginated
  user: User
  createdAt: Date!
}

"""
Mixed Drink when drink has ingredients
"""
type MixedDrink implements Drink & Node {
  id: ID!
  name: String!
  icon: Icon
  nutrition: DrinkNutrition!
  entries(
    sort: EntrySort,
    filter: EntryFilter,
    before: String,
    after: String,
    first: Int,
    last: Int
  ): EntriesPaginated
  user: User
  ingredients: [Ingredient!]!
  createdAt: Date!
}

"""
Union of Mixed and Base Drinks
"""
union DrinkResult = BaseDrink | MixedDrink

"""
Ingredient Interface to combine drink and ID
"""
interface DrinkIngredient {
  id: ID!
  drink: DrinkResult
}

"""
Relative Ingredient used in drink, size is based on total drink serving size (parts)
"""
type RelativeIngredient implements DrinkIngredient {
  id: ID!
  parts: Float
  drink: DrinkResult
}

"""
Absolute ingredient used in drink, size is based on absolute volume (ounces)
"""
type AbsoluteIngredient implements DrinkIngredient {
  id: ID!
  volume: Float
  drink: DrinkResult
}

"""
Ingredient Union combines Absolute and Relative Ingredients
"""
union Ingredient = RelativeIngredient | AbsoluteIngredient


"""
Sorting input for Entries
"""
input EntrySort {
  timestamp: Sort
  drink: Sort
  volume: Sort
}

"""
Base Entry for logged drinks
"""
type Entry implements Node {
  id: ID!

  volume: Float!
  servings: Float
  timestamp: Date!

  nutrition: EntryNutrition

  drink: DrinkResult!

  user: User
}

"""
Drink History to retreive summary of drink entries
"""
type DrinkHistory implements Node {
  id: ID!
  count: Int!
  volume: Float!
  water: Float!
  entries(
    sort: EntrySort,
    before: String,
    after: String,
    first: Int,
    last: Int,
    drinkId: ID
  ): EntriesPaginated
  drink: DrinkResult
}

"""
Base user type
"""
type User implements Node {
  id: ID!
  entries(
    sort: EntrySort,
    filter: EntryFilter,
    before: String,
    after: String,
    first: Int,
    last: Int,
    drinkId: ID,
  ): EntriesPaginated
  drinks(
    sort: DrinkSort,
    filter: DrinkFilter,
    before: String,
    after: String,
    first: Int,
    last: Int,
  ): DrinksPaginated
  drinksHistory(
    before: String,
    after: String,
    first: Int,
    last: Int,
    filter: DrinkHistoryFilter,
  ): DrinksHistoryPaginated
}

"""
Input for Ingredient type
"""
input IngredientInput {
  drinkId: ID!
  parts: Int
  volume: Float
}

"""
Input for Creating a new Drink
"""
input DrinkCreateInput {
  name: String!
  icon: Icon!
  upc: String

  nutrition: DrinkNutritionInput!

  ingredients: [IngredientInput!]
}

"""
Input for Editing a Drink
"""
input DrinkEditInput {
  id: ID!

  name: String
  icon: Icon

  nutrition: DrinkNutritionInput

  ingredients: [IngredientInput!]
}

"""
Pagination List metadata
"""
type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

"""
Interface for paginated queries
"""
interface PaginatedQuery {
  pageInfo: PageInfo
}

"""
Edge for Paginated Drinks
"""
type DrinkEdge {
  node: DrinkResult!
  cursor: String
}

"""
Paginated list of drinks
"""
type DrinksPaginated implements PaginatedQuery {
  edges: [DrinkEdge!]!
  pageInfo: PageInfo
}

"""
Edge for Paginated Entries
"""
type EntryEdge {
  node: Entry!
  cursor: String
}

"""
Paginated list of entries
"""
type EntriesPaginated implements PaginatedQuery {
  edges: [EntryEdge!]!
  pageInfo: PageInfo
}

"""
Edge for Paginated Drink History
"""
type DrinkHistoryEdge {
  node: DrinkHistory!
  cursor: String!
}

"""
Paginated Drinks History list
"""
type DrinksHistoryPaginated implements PaginatedQuery {
  edges: [DrinkHistoryEdge!]!
  pageInfo: PageInfo
}

"""
Filter by drink nutrition
"""
input DrinkNutritionFilter {
  coefficient: [NumberFilter!]

  calories: [NumberFilter!]
  saturatedFat: [NumberFilter!]
  totalFat: [NumberFilter!]
  cholesterol: [NumberFilter!]
  sodium: [NumberFilter!]
  carbohydrates: [NumberFilter!]
  fiber: [NumberFilter!]
  sugar: [NumberFilter!]
  addedSugar: [NumberFilter!]
  protein: [NumberFilter!]
  potassium: [NumberFilter!]

  caffeine: [NumberFilter!]
}

"""
Filter for the Drinks query
"""
input DrinkFilter {
  id: IDFilter
  search: String

  nutrition: DrinkNutritionFilter
  isUserDrink: Boolean
  isMixedDrink: Boolean
}

"""
Filter for the Drinks History query
"""
input DrinkHistoryFilter {
  search: String
  hasEntries: Boolean
  limit: Date
}

"""
Filter for the Entries query
"""
input EntryFilter {
  search: String
  limit: Date
  distinct: Boolean
}

"""
Union type for Drink scan result, or Base Drink if drink exists
"""
union ScanDrinkResult = ScanDrink | BaseDrink

"""
Root Queries
"""
type Query {
  """ Get node by ID """
  node(id: ID!): Node

  """ Get drink by ID """
  drink(id: ID!): DrinkResult

  """ Get paginated drinks """
  drinks(
    sort: DrinkSort,
    filter: DrinkFilter,
    before: String,
    after: String,
    first: Int,
    last: Int,
    userId: ID
  ): DrinksPaginated

  """ Get Entry by ID """
  entry(id: ID!): Entry

  """ Get paginated entries """
  entries(
    sort: EntrySort,
    filter: EntryFilter,
    before: String,
    after: String,
    first: Int,
    last: Int,
    drinkId: ID
  ): EntriesPaginated
  users: [User!]
  me: User
  user(id: ID!): User
  drinkHistory(id: ID!): DrinkHistory
  drinksHistory(
    before: String,
    after: String,
    first: Int,
    last: Int,
    filter: DrinkHistoryFilter,
  ): DrinksHistoryPaginated

  drinkScan(upc: String!): ScanDrinkResult
}

"""
Root Mutations
"""
type Mutation {
  entryCreate(
    volume: Float!,
    drinkId: ID!,
    unit: String,
  ): Entry
  entryDelete(id: ID!): Entry
  drinkCreate(drinkInput: DrinkCreateInput!): DrinkResult
  drinkDelete(id: ID!): DrinkResult
  drinkEdit(drinkInput: DrinkEditInput!): DrinkResult
  userCreate(id: ID!): User
}
